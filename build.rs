use std::{collections::HashSet, fs, process::Command};

fn main() {
    let output = Command::new("cargo")
        .arg("metadata")
        .arg("--format-version=1")
        .output()
        .unwrap();
    let metadata = serde_json::from_slice::<serde_json::Value>(&output.stdout).unwrap();
    let packages = metadata["packages"].as_array().unwrap();
    let mut dependencies: HashSet<&str> = HashSet::new();
    for package in packages {
        let deps = package["dependencies"].as_array().unwrap();
        for dep in deps {
            dependencies.insert(dep["name"].as_str().unwrap());
        }
    }
    let temp = r"/* Do not modify, this is generated by the compiler. */
#[macro_export]
macro_rules! plugin_apply{
    ($lua:expr)=>{
/* compiler add 'plugin::apply()?;' */
        /* compiler add 'plugin::apply()?;' */
    }
}";
    let mut apply_str = String::new();

    for name in dependencies {
        if name.starts_with("kissa-plugin-") || name.starts_with("kissa-core") {
            apply_str.push_str(&format!("{}::apply(&$lua)?;\n", name.replace("-", "_")));
        }
    }
    let temp = temp.replace("/* compiler add 'plugin::apply()?;' */", &apply_str.trim());
    fs::write("./src/kissa_plugin.rs", &temp).unwrap();
}
